# [PackageDev] target_format: plist, ext: tmLanguage
name: Mask
scopeName: source.mask
fileTypes: [ mask ]

uuid: 1a1ae218-751e-4eb8-8c10-4400d892a660

patterns:
- include: '#comments'
- include: '#punctuation'
- include: '#literal-string'
- include: '#import'
- include: '#define'
- include: '#tag_javascript'
- include: '#tag_style'
- include: '#tag_markdown'
- include: '#tag'
- include: '#statement'


- include: '#node_klass_id'
- include: '#node_template'
- include: '#node'



repository:
  punctuation:
    name: meta.group.braces
    match: ([>;\{\}])
    patterns:
      - include: "$self"

  import:
    name: import.mask
    begin: (import)\b
    beginCaptures:
      '1': { name: keyword }
    end: (;|(?<=['|"]))
    patterns:
      - name: keyword
        match: \b(as|from)\b
      - name: punctuation
        match: (,)
      - include: '#literal-string'
  define:
    name: 'define.mask'
    begin: ((define|let)\b)
    beginCaptures:
      '1': { name: support.constant }
    end: (?<=[>;\{\}])|(?=[>;\{\}])|([>;\{\}])
    patterns:
      - name: keyword
        match: (as|extends)\b
      - name: punctuation
        match: (,)
      - name: entity.other.attribute-name
        match: ([\w_\-:]+)
      - name: variable.parameter
        match: (\([^\)]*\))

  tag:
    name: tag.mask
    begin: >-
        (a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdo|big|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|dir|div|dl|dt|em|embed|fieldset|figcaption|figure|font|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hgroup|hr|html|i|iframe|img|input|ins|keygen|kbd|label|legend|li|link|map|mark|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|s|samp|script|section|select|small|source|span|strike|strong|style|sub|summary|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|u|ul|var|video|wbr|xmp)(?=[\s.#;\{\}]|$)
    beginCaptures:
      '1': { name: storage.type.mask }
      
    end: (?<=[>;\{\}])|(?=[>;\{\}])|([>;\{\}])
    patterns:
      - include: '#node_attributes'

  statement:
    name: tag.mask
    begin: >-
        (if|else|with|each|for|\+if|\+with|\+each|\+for|debugger|log|script|\:import|\:template)(?=[\s.#;\{\}]|$)
    beginCaptures:
      '1': { name: support.constant }
      
    end: (?<=[>;\{\}])|(?=[>;\{\}])|([>;\{\}])
    patterns:
      - include: '#node_attributes'

  
  tag_javascript:
    name: slot.mask
    begin: (slot|event|function|script)\b
    beginCaptures:
      '1': { name: support.constant }
    end: (\})|(?<=\})
    patterns:
    - include: '#klass_id'
    - include: '#node_attribute'
    - include: '#javascript'

  tag_style:
    name: syntax.style.mask
    begin: (style)\b
    beginCaptures:
      '1': { name: support.constant }
    end: (?<=\})|(\})
    patterns:
    - include: '#klass_id'
    - include: '#node_attribute'
    - include: '#style'

  tag_markdown:
    name: syntax.markdown.mask
    begin: (md|markdown)\b
    beginCaptures:
      '1': { name: support.constant }
    end: (?<=\})|(\})
    patterns:
    - include: '#klass_id'
    - include: '#node_attribute'
    - include: '#markdown'

  node:
    name: node.mask
    begin: ([^\s\.#;>\{\(]+)
    beginCaptures:
      '0': { name: entity.name.tag.mask }
    end: (?<=[>;\{\}])|(?=[>;\{\}])|([>;\{\}])
    patterns:
      - include: '#node_attributes'
  
  node_template:
    name: node.mask
    begin: (@[^\s\.#;>\{]+)
    beginCaptures:
      '0': { name: variable.parameter.mask }
    end: (?<=[>;\{\}])|(?=[>;\{\}])|([>;\{\}])
    patterns:
      - include: '#klass_id'
      - include: '#node_attribute'
  
  
  node_klass_id:
    name: node.head.mask
    begin: (?=[\.#])
    end: (?<=[>;\{\}])|(?=[>;\{\}])|([>;\{\}])
    patterns:
      - include: '#klass_id'
      - include: '#node_attribute'

  klass_id:
    name: node-head.attribute.mask
    begin: ([\.#][\w_\-$]*)
    beginCaptures:
      '1': { name: entity.other.attribute-name.markup.bold.mask }
    end: (?=[\s\.#])
    patterns:
    - include: '#interpolation'
    - name: entity.other.attribute-name.mask
      match: (([\w_\-$]+)(?=[\s.#]))
  

  node_attributes:
    name: node.attributes.mask
    begin: ""
    end: (?<=[>;\{\}])
    patterns:
    - include: '#klass_id'
    - include: '#node_attribute'
          

  node_attribute:
    name: node.attribute.mask
    patterns:
      - include: '#comments'
      - name: attribute-expression
        include: '#expression'
      - name: attribute-key-value
        begin: ([\w_\-$]+)(\s*=\s*)
        beginCaptures:
          '1': { name: entity.other.attribute-name }
          '2': { name: keyword.operator.assignment }

        end: ([\s;>\{])
        patterns:
          - include: '#node_attribute_value'

      - name: entity.other.attribute-name
        match: ([\w_\-$:]+)(?=([\s;>\{])|$)

  node_attribute_value:
    patterns:
      - name: constant.character
        match: (true|false)(?=[\s>;\{])
      - name: constant.numeric
        match: ([\d\.]+)(?=[\s>;\{])
      - include: '#literal-string'
      - name: string.quoted
        match: ((\s*)[^\s>;\{]+)
  
  node_attribute_expression:
    name: meta.group.braces.round
    begin: (\()
    end: (\))
    patterns:
      - include: "js-expression"

  comments:
    patterns:
    
    - name: comment.block.js
      begin: /\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.js}

    - name: comment.line.double-slash.js
      match: (//).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.js}

  literal-string:
    patterns:
    - name: literal-string
      begin: (''')
      beginCaptures:
        '0': {name: string.quoted.single.js}
      end: (''')
      endCaptures:
        '0': {name: string.quoted.single.js}
      patterns:
      - include: '#string-content'

    - name: literal-string
      begin: (""")
      beginCaptures:
        '0': {name: string.quoted.single.js}
      end: (""")
      endCaptures:
        '0': {name: string.quoted.single.js}
      patterns:
      - include: '#string-content'

    - name: literal-string
      begin: (')
      beginCaptures:
        '0': {name: string.quoted.single.js}
      end: (')
      endCaptures:
        '0': {name: string.quoted.single.js}
      patterns:
      - include: '#string-content'

    - name: literal-string
      begin: (")
      beginCaptures:
        '0': {name: string.quoted.single.js}
      end: (")
      endCaptures:
        '0': {name: string.quoted.single.js}
      patterns:
      - include: '#string-content'

  string-content:
    patterns:
    - name: constant.character.escape.js
      match: \\(x[\da-fA-F]{2}|u[\da-fA-F]{4}|.)

    - include: '#interpolation'
    - name: string
      match: (.)
    
    
    

  interpolation: 
    patterns:
      - name: markup.italic
        begin: (~\[)
        beginCaptures:
          '0': {name: variable.parameter }
        end: \]
        endCaptures:
          '0': {name: variable.parameter }
        patterns:
        - name: keyword.util.mask
          match: (\s*\w*\s*:)
        - include: '#js-interpolation'
        - include: 'source.js'

  js-interpolation:
    patterns: 
      - name: other.interpolated.mask
        begin: \[
        end: \]
        patterns:
        - include: '#js-interpolation'
        - include: source.js

  expression: 
    patterns:
      - name: markup.italic
        begin: (\()
        beginCaptures:
          '0': {name: variable.parameter }
        end: \)
        endCaptures:
          '0': {name: variable.parameter }
        patterns:
        - include: '#js-expression'
        - include: 'source.js'
  js-expression:
    patterns: 
      - name: other.interpolated.mask
        begin: \(
        end: \)
        patterns:
        - include: '#js-expression'
        - include: source.js
  javascript: 
    patterns:
      - name: syntax.js.mask
        begin: \{
        beginCaptures:
          '0': {name: variable.parameter }
        end: \}
        endCaptures:
          '0': {name: variable.parameter }
        patterns:
        - include: '#js-block'
        - include: 'source.js'
  js-block:
    patterns: 
      - name: other.interpolated.mask
        begin: \{
        end: \}
        patterns:
        - include: '#js-block'
        - include: source.js
  
  style: 
    patterns:
      - name: syntax.style.mask
        begin: (\{)
        beginCaptures:
          '1': {name: variable.parameter }
        end: (\})
        endCaptures:
          '1': {name: variable.parameter }
        patterns:
        - include: source.css

  html:
    patterns:
      - name: syntax.html.mask
        begin: ((\{|>)\s*('''|"""))
        beginCaptures:
          '1': { name: variable.parameter }
        end: (('''|"""))
        endCaptures:
          '1': { name: variable.parameter }
        patterns:
        - include: 'text.html.basic'

  markdown:
    name: syntax.markdown.mask
    begin: ((\{|>)\s*('''|"""))
    beginCaptures:
      '1': { name: variable.parameter }
    end: ('''|""")
    endCaptures:
      '1': { name: variable.parameter }
    patterns:
    - include: 'text.html.markdown'
